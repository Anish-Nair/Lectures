Regular Expression


New-Item -ItemType File -Path C:\Anish1\1.log 

$input1 = Get-Content -Path C:\Anish1\1.log
$input1 | gm
Get-Member -InputObject $input1
$input1[0]

foreach($oneset in $input1)
{
if($oneset -match "error")
{Write-Host "The error exist in file"}

}


foreach($oneset in $input1)
{
if($oneset -match "^Error")
{Write-Host "Error in file"}

}

foreach($oneset in $input1)
{
if($oneset -match "error$")
{Write-Host "Error in file"}

}



"e" -match "[a-d]"
"a" -match "[a-d]"
"e" -match "[a-da]"
"a" -match "[a-da]"
"e" -match "[a-d]"
"a" -match "^[a-d]$"
"aa" -match "^[a-d]$"
"aa" -match "^[a-da]$"
"e" -match "^[a-de]$"
"a" -match "^[a-de]$"
"z" -match "^[a-de]$"
"a" -match "^[a-dn]$"
"e" -match "^[a-dn]$"
"n" -match "^[a-dn]$"
"an" -match "^[a-dn]$"

"aa" -match "^[a-dn]{2}$"
"an" -match "^[a-dn]{2}$"
"adn" -match "^[a-dn]{3}$"
"adna" -match "^[a-dn]{3}$"
"a" -match "^[b-da]{3}$"
"abd" -match "^[b-da]{3}$"
"abda" -match "^[b-da]{3}$"
"abda" -match "^[b-da]{0,2}$"
"a" -match "^[b-da]{0,2}$"
"ab" -match "^[b-da]{0,2}$"
"zx" -match "^[b-da]{0,2}$"
"" -match "^[b-da]{0,2}$"

"a" -match "^[^b-da]{1,3}$"
"zx" -match "^[^b-da]{1,3}$"
"aa" -match "^[^b-da]{1,3}$"

"a" -match "^[z-pa]{1,2}$"  -- We cant mention in reverse order

"abc" -match "^[abc]{3}"
"aaa" -match "^[abc]{3}"
"aba" -match "^[abc]{3}"

"abcd-" -match "^[a-d]{3,5}[-]$"

"abcd/" -match "^[a-d]{3,5}[-/]$"
"abcd." -match "^[a-d]{3,5}[-/.]$"
"abc." -match "^[a-d]{3,5}[-/.]$"
"ab-" -match "^[a-d]{3,5}[-/.]$"
"abcd-" -match "^[a-d]{3,5}[-]$"

"abcd" -match "^[a-d]{3,5}[-/.]?$"  ============= Question marks can ignore or presence 

Get-Help about_Regular_Expressions -ShowWindow

Get-Help ? -ShowWindow

"a" -match "^\w?$"
"aa" -match "^\w?$"
"abc" -match "^\w?$"
"z" -match "^\w?$"
"1" -match "^\w?$"
"" -match "^\w?$"

"" -match "^\w$"
"aa" -match "^\w$"

"a" -match "^\w\w$"
"ab" -match "^\w\w$" === minimum two charcters

"aa" -match "^\d\d$"
"12" -match "^\d\d$"   == /d matches with digit /d/d means atleat 2 gigit

"1" -match "^[0-9]$"
"12" -match "^[0-9]$"

"1111" -match "[0-9]$"
"1119" -match "[0-9]$"
"a1" -match "[0-9]$"  ==== we have not mentioned Begins with but mantioned ends with digit
"1a" -match "[0-9]$"
"z9" -match "[0-9]$"
"9z" -match "[0-9]$"


"1" -match "^[0-56]$"
"55" -match "[0-56]$"
"1234567" -match "[0-56]$"
"55" -match "[0-56]$"
"66" -match "[0-56]$"


"3" -match "^[0-5][12]$"


"3" -match "^[0-1][345]$"
"14" -match "^[0-1][345]$"


"" -match "^[0-1]?[345]$"
"23" -match "^[0-1]?[345]$"
"13" -match "^[0-1]?[345]$"
"44" -match "^[0-1]?[345]$"

"25" -match "^[0-1]|[345]$"   ========== This will match any charatcer either from 0 to 1 or any of 345 but one of them should be 
"25" -match "^[0-1]|[345]$"
"6465" -match "^[0-1]|[345]$"
"543" -match "^[0-1]|[345]$"
"63" -match "^[0-1]|[345]$"
"6" -match "^[0-1]|[345]$"
"65" -match "^[0-1]|[345]$"
"65" -match "^[0-1]|[345]$"


"45" -match "^([0-1]|[345])$"  =========== This will match only one charccter that has been mentioned form 0 to 1 and 345



Matching date
10 -match "^0?[1-9]$"
0 -match "^0?[1-9]$" This condition is for 0 to 9


19 -match "^1[0-9]$"  This condition is for 10 to 19
21 -match "^2[0-9]$"   This condition is for 20 to 29
31 -match "^3[0-1]$"   This condition is for 30 to 31

"^(0?[1-9]|[12][0-9]|3[0-1])[-]"  === This is for date

"^(0?[1-9]|[1][0-2])[-]" ====  This for a mounth
\d\d ==== this for year



$dt="^(0?[1-9]|[12][0-9]|3[0-1])[-](0?[1-9]|[1][0-2])[-]\d\d$"

"32-12-18" -match $dt
"10-12-18" -match $dt



Credentials

$cred = Get-Credential 
$cred.GetType()
$cred | gm

$username = "anish"
$password = "123" | ConvertTo-SecureString -AsPlainText -Force
$creden = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $username,$password

To convert the password to 
$pass = $password | ConvertFrom-SecureString
$pass | out-file C:\Anish1\pass.txt
$passwd = Get-Content "C:\Anish1\pass.txt" | ConvertTo-SecureString

$profile
$HOME
New-Item -ItemType file "C:\Users\Administrator\Documents\WindowsPowerShell\Microsoft.PowerShellISE_profile.ps1" -Force

ii $profile

To create new object with hash table
$hashtable = @{ fname= "dinesh"
                lname= "patil" }

$obj = New-Object pscustomobject -Property $hashtable
$hashtable | gm

               
